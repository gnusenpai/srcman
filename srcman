#!/bin/bash

SRCMAN_VERSION="v0.5.0"
SRCMAN_CONFIG="${SRCMAN_CONFIG:-$HOME/.config/srcman.conf}"

srcman_createconfig() {
cat > "$SRCMAN_CONFIG" << 'EOF'
#!/bin/bash

SRCMAN_DIR="${SRCMAN_DIR:-$HOME/.srcman}"
SRCMAN_SHELL="${SRCMAN_SHELL:-bash}"
SRCMAN_BASHRC="${SRCMAN_BASHRC:-$HOME/.bashrc}"
SRCMAN_ZSHRCDIR="${SRCMAN_ZSHRCDIR:-$SRCMAN_DIR}"
SRCMAN_DEBUG="${SRCMAN_DEBUG:-0}"
EOF
}

# This will set variables if they are not found in the current config file.
SRCMAN_DIR="${SRCMAN_DIR:-$HOME/.srcman}"
SRCMAN_SHELL="${SRCMAN_SHELL:-bash}"
SRCMAN_BASHRC="${SRCMAN_BASHRC:-$HOME/.bashrc}"
SRCMAN_ZSHRCDIR="${SRCMAN_ZSHRCDIR:-$SRCMAN_DIR}"
SRCMAN_DEBUG="${SRCMAN_DEBUG:-0}"

srcman_help() {
cat << EOF
srcman - Arch Linux Source Manager $SRCMAN_VERSION

Usage: srcman                             initialize paths and repositories
   or: srcman source package              compiles and installs package from source
   or: srcman source operation [package]  apply operation to package or to source

Sources:
   -S, --sync     default Arch Linux PKGBUILDs cloned by git
   -A, --aur      local repository of AUR PKGBUILDs

Operations:
   Sync only:
   -y, --refresh  updates local Arch Linux PKGBUILDs
   -c, --clean    restores PKGBUILDs to default

   AUR only:
   -q, --query    lists all local AUR PKGBUILDs
   -r, --remove   removes given AUR PKGBUILD
   -f, --fetch    clones given AUR PKGBUILD, but does not build it

   Sync and AUR:
   -s, --search   searches local repositories for a package
   -e, --edit     opens PKGBUILD in a text editor
   -d, --dir      changes directory to a PKGBUILD
EOF
}

if [[ $1 = "--help" ]] || [[ $1 = "-h" ]]; then
	srcman_help
	exit
fi

if [[ -a $SRCMAN_CONFIG ]]; then
	source "$SRCMAN_CONFIG"
else
	read -n 1 -p $'[\e[34m*\e[0m] Config file not found, create one? [Y/n] ' answer
	case ${answer:0:1} in
		n|N ) ;;
		* ) srcman_createconfig; source "$SRCMAN_CONFIG";;
	esac
fi

if [[ $SRCMAN_DEBUG = 1 ]]; then
	echo "Version:   $SRCMAN_VERSION"
	echo "Debug:     $SRCMAN_DEBUG"
	echo "Config:    $SRCMAN_CONFIG"
	echo "Directory: $SRCMAN_DIR"
	echo "Shell:     $SRCMAN_SHELL"
	echo "Bashrc:    $SRCMAN_BASHRC"
	echo "Zshrc Dir: $SRCMAN_ZSHRCDIR"
fi

srcman_refresh() {
	cd $SRCMAN_DIR
		if [ ! -d "packages" ]; then
			echo -e "[\e[33m*\e[0m] packages directory not found, cloning..."
			git clone git://projects.archlinux.org/svntogit/packages.git
		fi
		if [ ! -d "community" ]; then
			echo -e "[\e[33m*\e[0m] community directory not found, cloning..."
			git clone git://projects.archlinux.org/svntogit/community.git
		fi
	cd $SRCMAN_DIR/packages
		echo -e "[\e[32m*\e[0m] Updating packages repo..."
		git pull
	cd $SRCMAN_DIR/community
		echo -e "[\e[32m*\e[0m] Updating community repo..."
		git pull 
}

srcman_initialize() {
	echo -e "[\e[32m*\e[0m] Creating directory tree..."
	mkdir -p $SRCMAN_DIR
	srcman_refresh
}

if [[ ! -d $SRCMAN_DIR ]]; then
	echo -e "[\e[33m*\e[0m] The srcman directories/repositories were not found at $SRCMAN_DIR"
	read -n 1 -p $'[\e[34m*\e[0m] Create them? [Y/n] ' answer
	case ${answer:0:1} in
		n|N ) exit;;
		* ) srcman_initialize;;
	esac
	srcman_help
fi

srcman_aur() {
	PKGURL=$(package-query -Aif "%G" $arg)
	PKGBASE=$(package-query -Aif "%b" $arg)
	if [[ $PKGURL = "" ]] || [[ $PKGBASE = "" ]]; then
		echo -e "[\e[31m*\e[0m] Package $arg not found."
		exit
	fi
	cd $SRCMAN_DIR
		if [ ! -d "aur" ]; then
			echo -e "[\e[33m*\e[0m] aur directory not found, creating..."
			mkdir aur
		fi
	cd $SRCMAN_DIR/aur
		if [ ! -d "$PKGBASE" ]; then
			echo -e "[\e[33m*\e[0m] Package $arg not found in local directory, cloning..."
			git clone $PKGURL
		fi
		echo -e "[\e[32m*\e[0m] Package $arg found."
		cd $PKGBASE
}

explode_args() {
	unset OPTS
	local arg=$1 key value

	while [[ $arg ]]; do
		[[ $arg = "--" ]] && OPTS+=("$@") && break;

		# Short options
		if [[ ${arg:0:1} = "-" && ${arg:1:1} != "-" ]]; then
			OPTS+=("-${arg:1:1}")
			(( ${#arg} > 2 )) && arg="-${arg:2}" || { shift; arg=$1; }
		# Long options
		elif [[ ${arg:0:2} = "--" ]]; then
			# Split argument at '=' :
			# e.g --foo=bar -> key=--foo, value=bar
			key=${arg%%=*}; value=${arg#*=}
			OPTS+=("$key")
			[[ $key != $value ]] && OPTS+=("$value")
			shift; arg=$1
		else
			OPTS+=("$arg"); shift; arg=$1
		fi
	done
}

unset MAJOR REFRESH SEARCH EDIT FETCH REMOVE QUERY CD CLEAN

explode_args "$@"

for ((i = 0; i < "${#OPTS[@]}"; i++)); do
	case ${OPTS[$i]} in
		-S|--sync)		unset OPTS[$i]; MAJOR="sync";;
		-A|--aur)		unset OPTS[$i]; MAJOR="aur";;
	esac
done

set -- "${OPTS[@]}"
unset OPTS

while [[ $1 ]]; do
	case "$1" in
		-y|--refresh)	REFRESH=1;;
		-s|--search)	SEARCH=1;;
		-e|--edit)		EDIT=1;;
		-f|--fetch)		FETCH=1;;
		-r|--remove)	REMOVE=1;;
		-q|--query)		QUERY=1;;
		-d|--dir)		CD=1;;
		-c|--clean)     CLEAN=1;;
		*)				ARGS+=("$1");;
	esac
	shift
done

if [[ $MAJOR = "sync" ]] && [[ $REFRESH = 1 ]]; then
	srcman_refresh
fi

if [[ $MAJOR = "sync" ]] && [[ $SEARCH = 1 ]] && [[ $ARGS != "" ]]; then
	PKGDIR=$(find $SRCMAN_DIR/packages $SRCMAN_DIR/community -maxdepth 1 -name \*$ARGS\* -not -iwholename '*.git*' | sed "s|$SRCMAN_DIR/||g")
	if [[ $PKGDIR != "" ]]; then
		echo -e "[\e[32m*\e[0m] Search results for $ARGS:"
		echo "$PKGDIR"
		exit
	else
		echo -e "[\e[31m*\e[0m] No search results for $ARGS."
		exit
	fi
fi

if [[ $MAJOR = "sync" ]] && [[ $EDIT = 1 ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		PKGDIR=$(find $SRCMAN_DIR/packages $SRCMAN_DIR/community -maxdepth 1 -name $arg -not -iwholename '*.git*')
		if [[ $PKGDIR != "" ]]; then
			echo -e "[\e[32m*\e[0m] Package $arg found."
			cd $PKGDIR/trunk
			"${EDITOR:-vi}" PKGBUILD
		else
			echo -e "[\e[31m*\e[0m] Package $arg not found."
		fi
	done
	exit
fi

if [[ $MAJOR = "sync" ]] && [[ $CD = 1 ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		PKGDIR=$(find $SRCMAN_DIR/packages $SRCMAN_DIR/community -maxdepth 1 -name $arg -not -iwholename '*.git*')
		if [[ $PKGDIR != "" ]]; then
			echo -e "[\e[32m*\e[0m] Package $arg found."
			cd $PKGDIR/trunk		
			case $SRCMAN_SHELL in
				bash)	exec bash --rcfile $SRCMAN_BASHRC -i;;
				zsh)	ZDOTDIR=$SRCMAN_ZSHRCDIR exec zsh -i;;
			esac
		else
			echo -e "[\e[31m*\e[0m] Package $arg not found."
		fi
	done
	exit
fi

if [[ $MAJOR = "sync" ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		PKGDIR=$(find $SRCMAN_DIR/packages $SRCMAN_DIR/community -maxdepth 1 -name $arg -not -iwholename '*.git*')
		if [[ $PKGDIR != "" ]]; then
			echo -e "[\e[32m*\e[0m] Package $arg found."
			cd $PKGDIR
			cd trunk
			pwd
			makepkg -si
		else
			echo -e "[\e[31m*\e[0m] Package $arg not found."
		fi
	done
	exit
fi

if [[ $MAJOR = "aur" ]] && [[ $SEARCH = 1 ]] && [[ $ARGS != "" ]]; then
	PKGDIR=$(find $SRCMAN_DIR/aur -maxdepth 1 -name \*$ARGS\* -not -iwholename '*.git*' | sed "s|$SRCMAN_DIR/||g")
	if [[ $PKGDIR != "" ]]; then
		echo -e "[\e[32m*\e[0m] Search results for $ARGS:"
		echo "$PKGDIR"
		exit
	else
		echo -e "[\e[31m*\e[0m] No search results for $ARGS."
		exit
	fi
fi

if [[ $MAJOR = "aur" ]] && [[ $QUERY = 1 ]]; then
	if [ -d "$SRCMAN_DIR/aur" ]; then
		echo -e "[\e[33m*\e[0m] Querying local AUR packages..."
		ls -1 --color=never $SRCMAN_DIR/aur
		exit
	else
		echo -e "[\e[32m*\e[0m] Local AUR directory doesn't exist, try cloning something first."
		exit
	fi
fi

if [[ $MAJOR = "aur" ]] && [[ $REMOVE = 1 ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		PKGDIR=$(find $SRCMAN_DIR/aur -maxdepth 1 -name \*$arg\* -not -iwholename '*.git*')
		if [[ $PKGDIR != "" ]]; then
			echo -e "[\e[33m*\e[0m] Removing $arg..."
			rm -rf $PKGDIR
		else
			echo -e "[\e[31m*\e[0m] Package $arg not found."
		fi
	done
	exit
fi

if [[ $MAJOR = "aur" ]] && [[ $FETCH = 1 ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		srcman_aur
	done
	exit
fi

if [[ $MAJOR = "aur" ]] && [[ $EDIT = 1 ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		srcman_aur
		"${EDITOR:-vi}" PKGBUILD
	done
	exit
fi

if [[ $MAJOR = "aur" ]] && [[ $CD = 1 ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		srcman_aur
		case $SRCMAN_SHELL in
			bash)	exec bash --rcfile $SRCMAN_BASHRC -i;;
			zsh)	ZDOTDIR=$SRCMAN_ZSHRCDIR exec zsh -i;;
		esac
	done
	exit
fi

if [[ $MAJOR = "aur" ]] && [[ $ARGS != "" ]]; then
	for arg in ${ARGS[@]}; do
		srcman_aur
		makepkg -si
	done
	exit
fi

if [[ $MAJOR = "sync" ]] && [[ $CLEAN = 1 ]]; then
	echo -e "[\e[32m*\e[0m] Cleaning git repos..."
	cd $SRCMAN_DIR/packages
		git clean -df
		git checkout -- .
	cd $SRCMAN_DIR/community
		git clean -df
		git checkout -- .
	exit
fi
